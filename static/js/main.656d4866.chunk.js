(this["webpackJsonpgame-of-life"]=this["webpackJsonpgame-of-life"]||[]).push([[0],{14:function(e,t,a){},19:function(e,t,a){e.exports=a(30)},24:function(e,t,a){},30:function(e,t,a){"use strict";a.r(t);var n=a(0),l=a.n(n),o=a(16),r=a.n(o),s=(a(24),a(14),a(8)),i=a(1),c=function(){return l.a.createElement("nav",null,l.a.createElement(s.b,{className:"links",to:"/"},"Conway's Game of Life"),l.a.createElement("ul",null,l.a.createElement(s.b,{className:"links",to:"/rules"},"Rules"),l.a.createElement(s.b,{className:"links",to:"/automata"},"More Info")))},u=function(){return l.a.createElement("div",null,l.a.createElement("h1",null,"Cellular Automata"),l.a.createElement("h3",{className:"automataHeaders"},"How did it originate?"),l.a.createElement("p",{className:"automataPars"},"In the 1940's Stanislaw Ulam and John Von Neumann were contemporaries at the Los Alamos National Labratory when this concept was discovered. This concept was studied throughout the 1950s and 1960s. In the 1970s Conway's game of life was created (two dimensional cellular automation) and the interest expanded."),l.a.createElement("h3",{className:"automataHeaders"},"What is cellular automata?"),l.a.createElement("p",{className:"automataPars"},"Typically a grid of cells that hold their own individual state. These cells can hold any number of dimensions. Whether the state changes depends completely on the state of their neighbors. The simplest possible states for the cells are 0 or 1 (true or false) and the simplest neighborhood would be a cell with just two neighbours (left and right). Each generation will cause the cells state to change accordingly."),l.a.createElement("h3",{className:"automataHeaders"},"How are rules determined?"),l.a.createElement("p",{className:"automataPars"},"We have to determine the rules for our particular cellular automata. This highly computational system can produce results similar to what we would find in nature. The state of the cells depends on the state of it's neighbors. The next generation of the grid will be determined by what rules we decide to implement. All of the possible outcomes are classified into four classifications (uniformity, repetition, random, and complexity) and will be determined by the rules put in place. We can implement any rules we want to which will be based on the living or dead amount of neighbors."),l.a.createElement("h3",{className:"automataHeaders"},"What is Turing Completeness?"),l.a.createElement("p",{className:"automataPars"},"A programming language is or is not Turing complete. All of the ones we know of are all Turing complete. This means it needs to do everything that a Turing machine can do. A Turing machine is though of as an endless infinite piece of tape. it is easiest to visualize this as simple as zeros and ones, but powerful enough to computate anything we can think of. Conway's Game of Life is Turing complete. It is based on the state of one cell changing depending on the state of other cells. The conditional branching is based on the rules of the game."))},m=function(){return l.a.createElement("div",null,l.a.createElement("h1",null,"Rules of the game"),l.a.createElement("p",{className:"rules"},"Each cell on a two-dimensional grid has up to eight neighbors. Whether the cell lives or dies, depends on how many of it's neighbors are living. For each new generation, the state of each cell may change."),l.a.createElement("li",{className:"rules rulesLi"},"If the cell is alive and has two or three neighbours, then the cell will remain alive. If the cell does not have two or three neighbours, it dies."),l.a.createElement("li",{className:"rules rulesLi"},"The cell can come back to life only if the cell is already dead and has exactly three neighbors. The cell will remain dead if this isn't true."),l.a.createElement("p",{className:"rules"},"These rules are implemented into Conway's Game of life, but cellular automata can have any rules that you wish to implement."))},h=a(6),d=a(18),f=function(e){var t=e.boxClass,a=e.row,n=e.col,o=e.selectBox,r=e.color,s=e.gameRunning,i=function(){o(a,n)};return l.a.createElement("div",null,"box On"===t?l.a.createElement("div",{className:"".concat(t," ").concat(r),onClick:s?null:i}):l.a.createElement("div",{className:"".concat(t),onClick:s?null:i}))},p=function(e){for(var t=e.grid,a=e.rows,n=e.cols,o=e.selectBox,r=e.color,s=e.gameRunning,i=[],c="",u=0;u<a;u++)for(var m=0;m<n;m++){var h=u+"_"+m;c=t[u][m]?"box On":"box Off",i.push(l.a.createElement(f,{gameRunning:s,color:r,boxClass:c,key:h,boxId:h,row:u,col:m,selectBox:o}))}return l.a.createElement("div",{className:"grid"},i)};var g=function(){var e=Object(n.useState)(4),t=Object(h.a)(e,2),a=t[0],o=t[1],r=Object(n.useState)(0),s=Object(h.a)(r,2),i=s[0],c=s[1],u=Object(n.useState)(!0),m=Object(h.a)(u,2),f=m[0],g=m[1],b=Object(n.useState)(1e3),E=Object(h.a)(b,2),w=E[0],v=E[1],y=Object(n.useState)(!1),N=Object(h.a)(y,2),O=N[0],C=N[1],j=Object(n.useState)(25),k=Object(h.a)(j,1)[0],S=Object(n.useState)(25),T=Object(h.a)(S,1)[0],x=Object(n.useState)("green"),A=Object(h.a)(x,2),I=A[0],H=A[1],L=Object(n.useState)(Array(k).fill().map((function(){return Array(T).fill(!1)}))),R=Object(h.a)(L,2),W=R[0],B=R[1],J=Array(k).fill().map((function(){return Array(T).fill(!1)})),P=["green","blue","yellow"],G=0;function M(e){return JSON.parse(JSON.stringify(e))}var F=function(){for(var e=M(W),t=0;t<k;t++)for(var n=0;n<T;n++){1===Math.floor(Math.random()*a)&&(e[t][n]=!0)}B(e)};function z(e,t,a){!1===a[e][t]&&3===G&&(a[e][t]=!0),!0===a[e][t]&&G<2&&(a[e][t]=!1),!0===a[e][t]&&G>3&&(a[e][t]=!1),G>0&&g(!0),G=0}var U=Object(d.useInterval)((function(){!function(){if(!1===f)return{stop:_};var e=W,t=M(W);g(!1);for(var a=0;a<k;a++)for(var n=0;n<T;n++){var l="undefined"===typeof e[a-1]?[void 0]:[e[a-1][n-1],e[a-1][n],e[a-1][n+1]],o="undefined"===typeof e[a][n]?"".concat(n):[e[a][n-1],e[a][n+1]],r="undefined"===typeof e[a+1]?"".concat(n):[e[a+1][n-1],e[a+1][n],e[a+1][n+1]],s=l.concat(o,r);s.map((function(e){!0===e&&G++})),z(a,n,t)}B(t),c(i+1)}(),C(!0)}),w,{autoStart:!1,immediate:!1,onFinish:function(){C(!1)}}),V=U.start,_=U.stop;return l.a.createElement("div",{className:"app"},l.a.createElement("div",{className:"top"},l.a.createElement("p",{className:"generations"}," Generations: ",i," "),l.a.createElement("div",{className:"buttons"},l.a.createElement("button",{onClick:V},"Play"),l.a.createElement("button",{onClick:_},"Stop"),l.a.createElement("button",{onClick:function(){B(J),c(0)}},"Clear"))),l.a.createElement(p,{gameRunning:O,grid:W,rows:k,cols:T,selectBox:function(e,t){var a=M(W);a[e][t]=!a[e][t],B(a)},color:I,setColor:H}),l.a.createElement("div",{className:"bot"},l.a.createElement("button",{onClick:function(){o(20),F()}},"Heavy Seed"),l.a.createElement("button",{onClick:function(){o(4),F()}},"Light Seed"),l.a.createElement("button",{onClick:function(){!function(){var e=P.indexOf(I);e===P.length-1?H(P[0]):H(P[e+1])}()}},"Change Color"),l.a.createElement("button",{onClick:function(){v(200)}},"Fast"),l.a.createElement("button",{onClick:function(){v(1200)}},"Slow")))};var b=function(){return l.a.createElement(s.a,null,l.a.createElement(i.c,null,l.a.createElement("div",{className:"app"},l.a.createElement(c,null),l.a.createElement(i.a,{exact:!0,path:"/game-of-life",component:g}),l.a.createElement(i.a,{path:"/rules",component:m}),l.a.createElement(i.a,{path:"/automata",component:u}))))};r.a.render(l.a.createElement(l.a.StrictMode,null,l.a.createElement(b,null)),document.getElementById("root"))}},[[19,1,2]]]);
//# sourceMappingURL=main.656d4866.chunk.js.map