{"version":3,"sources":["Nav.js","Automata.js","Rules.js","box.js","grid.js","Game.js","App.js","index.js"],"names":["Nav","className","to","Automata","Rules","Box","boxClass","row","col","selectBox","color","gameRunning","selectFunction","onClick","Grid","grid","rows","cols","rowsArr","iR","iC","boxId","push","key","Game","useState","seedPop","setSeedPop","generations","setGenerations","live","setLive","speed","setSpeed","setGameRunning","setColor","Array","fill","map","setGrid","freshGrid","colors","count","arrayClone","arr","JSON","parse","stringify","seed","gridCopy","R","C","Math","floor","random","rules","useInterval","stop","gridClone","above","undefined","sides","bottom","neighbors","concat","i","runGame","autoStart","immediate","onFinish","start","current","indexOf","length","colorPicker","App","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.656d4866.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Nav = () => {\r\n  return (\r\n    <nav>\r\n      <Link className='links' to='/'>\r\n        Conway's Game of Life\r\n      </Link>\r\n      <ul>\r\n        <Link className='links' to='/rules'>\r\n          Rules\r\n        </Link>\r\n        <Link className='links' to='/automata'>\r\n          More Info\r\n        </Link>\r\n\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Nav;\r\n","import React from 'react';\r\n\r\nconst Automata = () => {\r\n  return (\r\n    <div>\r\n      <h1>Cellular Automata</h1>\r\n      <h3 className='automataHeaders'>How did it originate?</h3>\r\n      <p className='automataPars'>\r\n        In the 1940's Stanislaw Ulam and John Von Neumann were contemporaries at\r\n        the Los Alamos National Labratory when this concept was discovered. This\r\n        concept was studied throughout the 1950s and 1960s. In the 1970s\r\n        Conway's game of life was created (two dimensional cellular automation)\r\n        and the interest expanded.\r\n      </p>\r\n      <h3 className='automataHeaders'>What is cellular automata?</h3>\r\n      <p className='automataPars'>\r\n        Typically a grid of cells that hold their own individual state. These\r\n        cells can hold any number of dimensions. Whether the state changes\r\n        depends completely on the state of their neighbors. The simplest\r\n        possible states for the cells are 0 or 1 (true or false) and the\r\n        simplest neighborhood would be a cell with just two neighbours (left and\r\n        right). Each generation will cause the cells state to change\r\n        accordingly.\r\n      </p>\r\n      <h3 className='automataHeaders'>How are rules determined?</h3>\r\n      <p className='automataPars'>\r\n        We have to determine the rules for our particular cellular automata.\r\n        This highly computational system can produce results similar to what we\r\n        would find in nature. The state of the cells depends on the state of\r\n        it's neighbors. The next generation of the grid will be determined by\r\n        what rules we decide to implement. All of the possible outcomes are\r\n        classified into four classifications (uniformity, repetition, random,\r\n        and complexity) and will be determined by the rules put in place. We can\r\n        implement any rules we want to which will be based on the living or dead\r\n        amount of neighbors.\r\n      </p>\r\n      <h3 className='automataHeaders'>What is Turing Completeness?</h3>\r\n      <p className='automataPars'>\r\n        A programming language is or is not Turing complete. All of the ones we\r\n        know of are all Turing complete. This means it needs to do everything\r\n        that a Turing machine can do. A Turing machine is though of as an\r\n        endless infinite piece of tape. it is easiest to visualize this as\r\n        simple as zeros and ones, but powerful enough to computate anything we\r\n        can think of. Conway's Game of Life is Turing complete. It is based on\r\n        the state of one cell changing depending on the state of other cells.\r\n        The conditional branching is based on the rules of the game.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Automata;\r\n","import React from 'react';\r\n\r\nconst Rules = () => {\r\n  return (\r\n    <div>\r\n      <h1>Rules of the game</h1>\r\n      <p className='rules'>\r\n        Each cell on a two-dimensional grid has up to eight neighbors. Whether\r\n        the cell lives or dies, depends on how many of it's neighbors are\r\n        living. For each new generation, the state of each cell may change.\r\n      </p>\r\n      <li className='rules rulesLi'>\r\n        If the cell is alive and has two or three neighbours, then the cell will\r\n        remain alive. If the cell does not have two or three neighbours, it\r\n        dies.\r\n      </li>\r\n      <li className='rules rulesLi'>\r\n        The cell can come back to life only if the cell is already dead and has\r\n        exactly three neighbors. The cell will remain dead if this isn't true.\r\n      </li>\r\n      <p className='rules'>\r\n        These rules are implemented into Conway's Game of life, but cellular\r\n        automata can have any rules that you wish to implement.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Rules;\r\n","import React from 'react';\r\n\r\nconst Box = ({ boxClass, row, col, selectBox, color, gameRunning }) => {\r\n  const selectFunction = () => {\r\n    selectBox(row, col);\r\n  };\r\n  return (\r\n    <div>\r\n      {boxClass === 'box On' ? (\r\n        <div\r\n          className={`${boxClass} ${color}`}\r\n          onClick={gameRunning ? null : selectFunction}\r\n        />\r\n      ) : (\r\n        <div\r\n          className={`${boxClass}`}\r\n          onClick={gameRunning ? null : selectFunction}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Box;\r\n","import React from 'react';\r\nimport Box from './box';\r\n\r\nconst Grid = ({ grid, rows, cols, selectBox, color, gameRunning }) => {\r\n  var rowsArr = [];\r\n  var boxClass = '';\r\n  for (var iR = 0; iR < rows; iR++) {\r\n    for (var iC = 0; iC < cols; iC++) {\r\n      let boxId = iR + '_' + iC;\r\n      boxClass = grid[iR][iC] ? 'box On' : 'box Off';\r\n      rowsArr.push(\r\n        <Box\r\n          gameRunning={gameRunning}\r\n          color={color}\r\n          boxClass={boxClass}\r\n          key={boxId}\r\n          boxId={boxId}\r\n          row={iR}\r\n          col={iC}\r\n          selectBox={selectBox}\r\n        />\r\n      );\r\n    }\r\n  }\r\n  return <div className='grid'>{rowsArr}</div>;\r\n};\r\n\r\nexport default Grid;\r\n","import React, { useState } from 'react';\r\nimport { useInterval } from 'react-interval-hook';\r\nimport './App.css';\r\nimport Grid from './grid';\r\n\r\nfunction Game() {\r\n  const [seedPop, setSeedPop] = useState(4);\r\n  const [generations, setGenerations] = useState(0);\r\n  const [live, setLive] = useState(true);\r\n  const [speed, setSpeed] = useState(1000);\r\n  const [gameRunning, setGameRunning] = useState(false);\r\n  const [rows] = useState(25);\r\n  const [cols] = useState(25);\r\n  const [color, setColor] = useState('green');\r\n  const [grid, setGrid] = useState(\r\n    Array(rows)\r\n      .fill()\r\n      .map(() => Array(cols).fill(false))\r\n  );\r\n\r\n  const freshGrid = Array(rows)\r\n    .fill()\r\n    .map(() => Array(cols).fill(false));\r\n\r\n  const colors = ['green', 'blue', 'yellow'];\r\n  var count = 0;\r\n\r\n  function arrayClone(arr) {\r\n    return JSON.parse(JSON.stringify(arr));\r\n  }\r\n\r\n  function clear() {\r\n    setGrid(freshGrid);\r\n    setGenerations(0);\r\n  }\r\n\r\n  const selectBox = (row, col) => {\r\n    let gridCopy = arrayClone(grid);\r\n    gridCopy[row][col] = !gridCopy[row][col];\r\n    setGrid(gridCopy);\r\n  };\r\n\r\n  const seed = () => {\r\n    let gridCopy = arrayClone(grid);\r\n    for (var R = 0; R < rows; R++) {\r\n      for (var C = 0; C < cols; C++) {\r\n        let num = Math.floor(Math.random() * seedPop);\r\n        if (num === 1) {\r\n          gridCopy[R][C] = true;\r\n        }\r\n      }\r\n    }\r\n    setGrid(gridCopy);\r\n  };\r\n\r\n  function counter(arr) {\r\n    arr.map((i) => {\r\n      if (i === true) {\r\n        count++;\r\n      }\r\n    });\r\n  }\r\n\r\n  function rules(R, C, arr) {\r\n    if (arr[R][C] === false && count === 3) {\r\n      arr[R][C] = true;\r\n    }\r\n    if (arr[R][C] === true && count < 2) {\r\n      arr[R][C] = false;\r\n    }\r\n    if (arr[R][C] === true && count > 3) {\r\n      arr[R][C] = false;\r\n    }\r\n    if (count > 0) {\r\n      setLive(true);\r\n    }\r\n\r\n    count = 0;\r\n  }\r\n\r\n  const { start, stop } = useInterval(\r\n    () => {\r\n      runGame();\r\n      setGameRunning(true);\r\n    },\r\n    speed,\r\n    {\r\n      autoStart: false,\r\n      immediate: false,\r\n      onFinish: () => {\r\n        setGameRunning(false);\r\n      },\r\n    }\r\n  );\r\n\r\n  function colorPicker() {\r\n    const current = colors.indexOf(color);\r\n    if (current === colors.length - 1) {\r\n      setColor(colors[0]);\r\n    } else {\r\n      setColor(colors[current + 1]);\r\n    }\r\n  }\r\n\r\n  function runGame() {\r\n    if (live === false) {\r\n      return { stop };\r\n    } else {\r\n      let gridClone = grid;\r\n      let gridCopy = arrayClone(grid);\r\n      setLive(false);\r\n\r\n      for (var R = 0; R < rows; R++) {\r\n        for (var C = 0; C < cols; C++) {\r\n          const above =\r\n            typeof gridClone[R - 1] === 'undefined'\r\n              ? [undefined]\r\n              : [\r\n                  gridClone[R - 1][C - 1],\r\n                  gridClone[R - 1][C],\r\n                  gridClone[R - 1][C + 1],\r\n                ];\r\n\r\n          const sides =\r\n            typeof gridClone[R][C] === 'undefined'\r\n              ? `${(R, C)}`\r\n              : [gridClone[R][C - 1], gridClone[R][C + 1]];\r\n\r\n          const bottom =\r\n            typeof gridClone[R + 1] === 'undefined'\r\n              ? `${(R, C)}`\r\n              : [\r\n                  gridClone[R + 1][C - 1],\r\n                  gridClone[R + 1][C],\r\n                  gridClone[R + 1][C + 1],\r\n                ];\r\n\r\n          const neighbors = above.concat(sides, bottom);\r\n\r\n          counter(neighbors);\r\n          rules(R, C, gridCopy);\r\n        }\r\n      }\r\n\r\n      setGrid(gridCopy);\r\n\r\n      setGenerations(generations + 1);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className='app'>\r\n      <div className='top'>\r\n        <p className='generations'> Generations: {generations} </p>\r\n        <div className='buttons'>\r\n          <button onClick={start}>Play</button>\r\n          <button onClick={stop}>Stop</button>\r\n\r\n          <button\r\n            onClick={() => {\r\n              clear();\r\n            }}>\r\n            Clear\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <Grid\r\n        gameRunning={gameRunning}\r\n        grid={grid}\r\n        rows={rows}\r\n        cols={cols}\r\n        selectBox={selectBox}\r\n        color={color}\r\n        setColor={setColor}\r\n      />\r\n      <div className='bot'>\r\n        <button\r\n          onClick={() => {\r\n            setSeedPop(20);\r\n            seed();\r\n          }}>\r\n          Heavy Seed\r\n        </button>\r\n        <button\r\n          onClick={() => {\r\n            setSeedPop(4);\r\n            seed();\r\n          }}>\r\n          Light Seed\r\n        </button>\r\n        <button\r\n          onClick={() => {\r\n            colorPicker();\r\n          }}>\r\n          Change Color\r\n        </button>\r\n        <button\r\n          onClick={() => {\r\n            setSpeed(200);\r\n          }}>\r\n          Fast\r\n        </button>\r\n        <button\r\n          onClick={() => {\r\n            setSpeed(1200);\r\n          }}>\r\n          Slow\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Game;\r\n","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport Nav from './Nav';\r\nimport Automata from './Automata';\r\nimport Rules from './Rules';\r\nimport Game from './Game';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <div className='app'>\r\n          <Nav />\r\n          <Route exact path='/game-of-life' component={Game} />\r\n          <Route path='/rules' component={Rules} />\r\n          <Route path='/automata' component={Automata} />\r\n        </div>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}